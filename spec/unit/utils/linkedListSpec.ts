import { LinkedList } from '../../../src/utils/linkedList'
describe('linkedList', () => {
  test('empty', () => {
    const inst = new LinkedList()
    expect(inst.head()).toBeUndefined()
    expect(inst.tail()).toBeUndefined()
    expect(inst.length()).toBe(0)
    expect(() => inst.get(0)).toThrow(Error)
  })
  test('insert to head-tail element', () => {
    const inst = new LinkedList<number>()
    inst.add(1)
    expect(inst.head()).toBe(1)
    expect(inst.tail()).toBe(1)
    expect(inst.length()).toBe(1)
    expect(inst.get(0)).toBe(1)
    expect(() => inst.get(1)).toThrow(Error)
  })
  test('remove head-tail element', () => {
    const inst = new LinkedList<number>()
    const remove = inst.add(1)
    remove()
    expect(inst.head()).toBeUndefined()
    expect(inst.tail()).toBeUndefined()
    expect(inst.length()).toBe(0)
    expect(() => inst.get(0)).toThrow(Error)
  })
  test('error multiple remove func invocation', () => {
    const inst = new LinkedList<number>()
    const remove = inst.add(1)
    remove()
    expect(() => remove()).toThrow(Error)
    expect(inst.head()).toBeUndefined()
    expect(inst.tail()).toBeUndefined()
    expect(inst.length()).toBe(0)
    expect(() => inst.get(0)).toThrow(Error)
  })
  test('insert after head element', () => {
    const inst = new LinkedList<number>()
    inst.add(1)
    inst.add(2)
    expect(inst.head()).toBe(1)
    expect(inst.tail()).toBe(2)
    expect(inst.length()).toBe(2)
    expect(inst.get(0)).toBe(1)
    expect(inst.get(1)).toBe(2)
  })
  test('removing head element shifts to tail element', () => {
    const inst = new LinkedList<number>()
    const remove = inst.add(1)
    inst.add(2)
    remove()
    expect(inst.head()).toBe(2)
    expect(inst.tail()).toBe(2)
    expect(inst.length()).toBe(1)
    expect(inst.get(0)).toBe(2)
  })
  test('remove tail element', () => {
    const inst = new LinkedList<number>()
    inst.add(1)
    const remove = inst.add(2)
    remove()
    expect(inst.head()).toBe(1)
    expect(inst.tail()).toBe(1)
    expect(inst.length()).toBe(1)
    expect(inst.get(0)).toBe(1)
  })
  test('removing middle element keeps links', () => {
    const inst = new LinkedList<number>()
    const remove1 = inst.add(1)
    const remove2 = inst.add(2)
    inst.add(3)
    remove2()
    expect(inst.head()).toBe(1)
    expect(inst.tail()).toBe(3)
    expect(inst.length()).toBe(2)
    remove1()
    expect(inst.head()).toBe(3)
    expect(inst.tail()).toBe(3)
    expect(inst.length()).toBe(1)
    expect(inst.get(0)).toBe(3)
  })
  test('increment removed element in for-each loop', () => {
    const inst = new LinkedList<number>()
    inst.add(1)
    const remove = inst.add(2)
    inst.add(3)
    const expected = [1, 2, 3]
    let index = 0
    inst.forEach(v => {
      if (v === 2) {
        remove()
      }
      expect(v).toEqual(expected[index])
      index++
    })
    expect(inst.length()).toBe(2)
  })
  test('clear', () => {
    const inst = new LinkedList<number>()
    inst.add(1)
    inst.clear()
    expect(inst.length()).toBe(0)
    expect(() => inst.get(0)).toThrow(Error)
  })
  test('return null when no value matched', () => {
    const inst = new LinkedList<number>()
    expect(inst.find(() => true)).toBeNull()
    inst.add(1)
    expect(inst.find(() => true)).toBe(1)
    inst.add(2)
    expect(inst.find(() => true)).toBe(1)
    expect(inst.find((v) => v === 2)).toBe(2)
  })
})
